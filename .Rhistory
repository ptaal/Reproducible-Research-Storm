submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
passed
faild
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
setwd("~/Desktop/Look/Education/Coursera/Data_Science_Certification/5_Reproducible_Research/assignment/assign2/project_2")
library(dplyr)
library(lubridate)
library(ggplot2)
stormData <- read.csv("../data/stormdata.csv", header = TRUE)
stormDataAcessTime <- Sys.time()
dim(stormData)
names(stormData)
stormDataAccessTime
stormDataAcessTime <- Sys.time()
stormDataAcessTime
dim(stormData)
names(stormData)
popHealth <- select(stormData, BGN_DATE, EVTYPE, FATALITIES, INJURIES)
popHealth$BGN_DATE <- as.Date(strptime(popHealth$BGN_DATE, "%m/%d/%Y"), "%m/%d/%Y")
## Converting BGN_DATE to only show the year (excluding month and day).
popHealth$BGN_DATE <- year(popHealth$BGN_DATE)
## Creating a new database temp and taking out 4 columns from the popHealth databset and filtering by frequency of greater than 0 for either FATALITIES or INJURIES. Then grouping by BGN_DATE(year), following by EVTYPE.
temp <- unique(as.data.frame(select(popHealth, BGN_DATE, EVTYPE, FATALITIES, INJURIES) %>% filter(FATALITIES > 0 | INJURIES > 0) %>% group_by(BGN_DATE, EVTYPE)))
sapply(split(temp, temp$BGN_DATE), nrow)
dim(temp)
multiValues <- strsplit(as.character(toupper(temp$EVTYPE)), 'COLD/WIND(*SKIP)(*F)|FROST/FREEZE(*SKIP)(*F)|URBAN/SML(*SKIP)(*F)|SURGE/TIDE(*SKIP)(*F)|URBAN AND SMALL(*SKIP)(*F)|HYPOTHERMIA/EXPOSURE(*SKIP)(*F)|HYPERTHERMIA/EXPOSURE(*SKIP)(*F)|WEATHER/MIX(*SKIP)(*F)|FLOODING/EROSION(*SKIP)(*F)|/|WARM AND DRY(*SKIP)(*F)|LANDSLIDE(*SKIP)(*F)|LANDSLIDES(*SKIP)(*F)| AND | & |- |, ', perl=TRUE)
temp <- data.frame(BGN_DATE=rep(temp$BGN_DATE, sapply(multiValues, FUN=length)), EVTYPE=unlist(multiValues),FATALITIES=rep(temp$FATALITIES, sapply(multiValues, FUN=length)), INJURIES=rep(temp$INJURIES, sapply(multiValues, FUN=length)))
dim(temp)
## 1.  Astronomical Low Tide
#  There are no fatality/injury records for Astronomical Low Tide.
temp$EVTYPE <- ifelse(grepl("*astronomic*", temp$EVTYPE, ignore.case = TRUE), "Astronomical Low Tide", gsub("astronomical", "Astronomical Low Tide", temp$EVTYPE))
## 2.  Avalanche
temp$EVTYPE <- ifelse(grepl("*aval*", temp$EVTYPE, ignore.case = TRUE), "Avalanche", gsub("avalanche", "Avalanche", temp$EVTYPE))
## 3.  Blizzard
temp$EVTYPE <- ifelse(grepl("*bliz*", temp$EVTYPE, ignore.case = TRUE), "Blizzard", gsub("blizzard", "Blizzard", temp$EVTYPE))
## 4.  Coastal Flood
#  Costal storm/Erosion, type names are revised/renamed to Coastal Flood.
temp$EVTYPE <- ifelse(grepl("*coast*|*tidal*", temp$EVTYPE, ignore.case = TRUE), "Coastal Flood", gsub("coastal", "Coastal Flood", temp$EVTYPE))
## 5.  Cold/Wind Chill
#  Low Temperature, type name is revised/renamed to Cold/Wind Chill.
temp$EVTYPE <- ifelse(grepl("^cold*|*temperature", temp$EVTYPE, ignore.case = TRUE), "Cold/Wind Chill", gsub("Cold/Wind Chill", "Cold/Wind Chil", temp$EVTYPE))
## 6.  Debris Flow
#  Slide/Slides, type name is revised/renamed to Debris Flow.
temp$EVTYPE <- ifelse(grepl("*debris*|^slide*|*lands*", temp$EVTYPE, ignore.case = TRUE), "Debris Flow", gsub("Debris", "Debris Flow", temp$EVTYPE))
## 7.  Dense Fog
#  Fog, type name is revised/renamed to Dense Fog.
temp$EVTYPE <- ifelse(grepl("^fog$|^dense*", temp$EVTYPE, ignore.case = TRUE), "Dense Fog", gsub("dense fog", "Dense Fog", temp$EVTYPE))
## 8.  Dense Smoke
# There are no fatality/injury records for Dense Smoke.
temp$EVTYPE <- ifelse(grepl("*smoke*", temp$EVTYPE, ignore.case = TRUE), "Dense Smoke", gsub("dense smoke", "Dense Smoke", temp$EVTYPE))
## 9.  Drought
temp$EVTYPE <- ifelse(grepl("^drought*", temp$EVTYPE, ignore.case = TRUE), "Drought", gsub("drought", "Drought", temp$EVTYPE))
## 10. Dust Devil
temp$EVTYPE <- ifelse(grepl("*devil*", temp$EVTYPE, ignore.case = TRUE), "Dust Devil", gsub("devil", "Dust Devil", temp$EVTYPE))
## 11. Dust Storm
temp$EVTYPE <- ifelse(grepl("*dust storm*", temp$EVTYPE, ignore.case = TRUE), "Dust Storm", gsub("dust storm", "Dust Storm", temp$EVTYPE))
## 12. Excessive Heat
#  Extreme heat type name is revised/renamed to Excessive Heat.
temp$EVTYPE <- ifelse(grepl("*excessive.[^r].*|*extreme.[^wc].*", temp$EVTYPE, ignore.case = TRUE), "Excessive Heat", gsub("excessiveheat", "Excessive Heat", temp$EVTYPE))
## 13. Extreme Cold/Wind Chill
temp$EVTYPE <- ifelse(grepl("^([^c]).*cold*|*extreme wind*", temp$EVTYPE, ignore.case = TRUE), "Extreme Cold/Wind Chill", gsub("extremecoldwindchill", "Extreme Cold/Wind Chill", temp$EVTYPE))
## 14. Flash Flood
#  River flood/Mudslide/Mudslides, type names are revised/renamed to Flash Flood.
temp$EVTYPE <- ifelse(grepl("*flash*|*river*|*mud*", temp$EVTYPE, ignore.case = TRUE), "Flash Flood", gsub("flashflood", "Flash Flood", temp$EVTYPE))
## 15. Flood
temp$EVTYPE <- ifelse(grepl("^flood*|^minor*|*stream*", temp$EVTYPE, ignore.case = TRUE), "Flood", gsub("flXXd", "Flood", temp$EVTYPE))
## 16. Frost/Freeze
temp$EVTYPE <- ifelse(grepl("*freez*|*frost*", temp$EVTYPE, ignore.case = TRUE), "Frost Freeze", gsub("XYZ", "XYZ", temp$EVTYPE))
## 17. Funnel Cloud
temp$EVTYPE <- ifelse(grepl("*funnel*", temp$EVTYPE, ignore.case = TRUE), "Funnel Cloud", gsub("XYZ", "XYZ", temp$EVTYPE))
## 18. Freezing Fog
#  Glaze, type name is revised/renamed to Freezing Fog.
temp$EVTYPE <- ifelse(grepl("*freezing fog*|*glaze*", temp$EVTYPE, ignore.case = TRUE), "Freezing Fog", gsub("XYZ", "XYZ", temp$EVTYPE))
## 19. Hail
temp$EVTYPE <- ifelse(grepl("*small*|*hail*", temp$EVTYPE, ignore.case = TRUE), "Hail", gsub("XYZ", "XYZ", temp$EVTYPE))
## 20. Heat
#  Heat wave drought/Unseasonably warm/Warm weather, type names are revised/renamed to Heat.
temp$EVTYPE <- ifelse(grepl("^heat$|^heat.*wave|*record*|*warm*", temp$EVTYPE, ignore.case = TRUE), "Heat", gsub("XYZ", "XYZ", temp$EVTYPE))
## 21. Heavy Rain
temp$EVTYPE <- ifelse(grepl("*rain*", temp$EVTYPE, ignore.case = TRUE), "Heavy Rain", gsub("XYZ", "XYZ", temp$EVTYPE))
## 22. Heavy Snow
temp$EVTYPE <- ifelse(grepl("*snow*", temp$EVTYPE, ignore.case = TRUE), "Heavy Snow", gsub("XYZ", "XYZ", temp$EVTYPE))
## 23. High Surf
#  High seas/Seas/High waves/Heavy seas/High swells/Rough seas/Drowning/High water/Rapidly rising water, type names are revised/renamed to High Surf.
temp$EVTYPE <- ifelse(grepl("*surf$|*seas$|*wave*|*swells*|*drowning*|*water$", temp$EVTYPE, ignore.case = TRUE), "High Surf", gsub("XYZ", "XYZ", temp$EVTYPE))
## 24. High Wind
temp$EVTYPE <- ifelse(grepl("^high wind*|^wind$|^winds$|^non-severe*", temp$EVTYPE, ignore.case = TRUE), "High Wind", gsub("XYZ", "XYZ", temp$EVTYPE))
## 25. Hurricane (Typhoon)
temp$EVTYPE <- ifelse(grepl("*hurricane*|*typhoon*", temp$EVTYPE, ignore.case = TRUE), "Hurricane (Typhoon)", gsub("XYZ", "XYZ", temp$EVTYPE))
## 26. Ice Storm
#  Ice on road/Icy roads/Black ice/Hypothermia, type names are revised/renamed to Ice Storm.
temp$EVTYPE <- ifelse(grepl("*ice storm*|*ice$|*icy roads$|*ice on *|^ice roads$|*hyp*", temp$EVTYPE, ignore.case = TRUE), "Ice Storm", gsub("XYZ", "XYZ", temp$EVTYPE))
## 27. Lake-Effect Snow
#  There are no fatality/injury records for Lake-Effect Snow.
temp$EVTYPE <- ifelse(grepl("*effect*", temp$EVTYPE, ignore.case = TRUE), "Lake-Effect Snow", gsub("XYZ", "XYZ", temp$EVTYPE))
## 28. Lakeshore Flood
#  There are no fatality/injury records for Lakeshore Flood.
temp$EVTYPE <- ifelse(grepl("*lake*", temp$EVTYPE, ignore.case = TRUE), "Lakeshore Flood", gsub("XYZ", "XYZ", temp$EVTYPE))
## 29. Lightning
temp$EVTYPE <- ifelse(grepl("*light*", temp$EVTYPE, ignore.case = TRUE), "Lightning", gsub("XYZ", "XYZ", temp$EVTYPE))
## 30. Marine Hail
#  There are no fatality/injury records for Marine Hail.
temp$EVTYPE <- ifelse(grepl("*marine hail*", temp$EVTYPE, ignore.case = TRUE), "Marine Hail", gsub("XYZ", "XYZ", temp$EVTYPE))
## 31. Marine High Wind
temp$EVTYPE <- ifelse(grepl("*marine high*", temp$EVTYPE, ignore.case = TRUE), "Marine High Wind", gsub("XYZ", "XYZ", temp$EVTYPE))
## 32. Marine Strong Wind
temp$EVTYPE <- ifelse(grepl("*marine strong*", temp$EVTYPE, ignore.case = TRUE), "Marine Strong Wind", gsub("XYZ", "XYZ", temp$EVTYPE))
## 33. Marine Thunderstorm Wind
#  Marine mishap/Marine accident, type names are revised/renamed to Marine Thunderstorm Wind.
temp$EVTYPE <- ifelse(grepl("*marine thunderstorm*|*marine ts|*mishap*|*accident*", temp$EVTYPE, ignore.case = TRUE), "Marine Thunderstorm Wind", gsub("XYZ", "XYZ", temp$EVTYPE))
## 34. Rip Current
temp$EVTYPE <- ifelse(grepl("*current", temp$EVTYPE, ignore.case = TRUE), "Rip Current", gsub("XYZ", "XYZ", temp$EVTYPE))
## 35. Seiche
#  There are no fatality/injury records for Seiche.
temp$EVTYPE <- ifelse(grepl("*seiche*", temp$EVTYPE, ignore.case = TRUE), "Seiche", gsub("XYZ", "XYZ", temp$EVTYPE))
## 36. Sleet
temp$EVTYPE <- ifelse(grepl("*sleet*", temp$EVTYPE, ignore.case = TRUE), "Sleet", gsub("XYZ", "XYZ", temp$EVTYPE))
## 37. Storm Surge/Tide
temp$EVTYPE <- ifelse(grepl("*surge*", temp$EVTYPE, ignore.case = TRUE), "Storm Surge/Tide", gsub("XYZ", "XYZ", temp$EVTYPE))
## 38. Strong Wind
#  Gusty wind, type name is revised/renamed to Strong Wind.
temp$EVTYPE <- ifelse(grepl("^strong*|*gusty*", temp$EVTYPE, ignore.case = TRUE), "Strong Wind", gsub("XYZ", "XYZ", temp$EVTYPE))
## 39. Tunderstorm Wind
#  Dry microburst/Whirlwind, type names are revised/renamed to Thunderstorm Wind.
temp$EVTYPE <- ifelse(grepl("^thunderstorm*|^TSTM*|^thunder*|*micro*|*mirc*|*wind storm*|*whirl*|^non tstm*", temp$EVTYPE, ignore.case = TRUE), "Thunderstorm Wind", gsub("XYZ", "XYZ", temp$EVTYPE))
## 40. Tornado
#  Mixed precid, type name is revised/renamed to Tornado
temp$EVTYPE <- ifelse(grepl("^tornado*|*precip*", temp$EVTYPE, ignore.case = TRUE), "Tornado", gsub("XYZ", "XYZ", temp$EVTYPE))
## 41. Tropical Depression
#  There are no fatality/injury records for Tropical Depression.
temp$EVTYPE <- ifelse(grepl("*depression*", temp$EVTYPE, ignore.case = TRUE), "Tropical Depression", gsub("XYZ", "XYZ", temp$EVTYPE))
## 42. Tropical Storm
temp$EVTYPE <- ifelse(grepl("*tropical*", temp$EVTYPE, ignore.case = TRUE), "Tropical Storm", gsub("XYZ", "XYZ", temp$EVTYPE))
## 43. Tsunami
temp$EVTYPE <- ifelse(grepl("*tsunami*", temp$EVTYPE, ignore.case = TRUE), "Tsunami", gsub("XYZ", "XYZ", temp$EVTYPE))
## 44. Volcanic Ash
#  There are no fatality/injury records for Volcanic Ash.
temp$EVTYPE <- ifelse(grepl("*volcanic*", temp$EVTYPE, ignore.case = TRUE), "Volcanic Ash", gsub("XYZ", "XYZ", temp$EVTYPE))
## 45. Waterspout
temp$EVTYPE <- ifelse(grepl("*waterspout*", temp$EVTYPE, ignore.case = TRUE), "Waterspout", gsub("XYZ", "XYZ", temp$EVTYPE))
## 46. Wildfire
temp$EVTYPE <- ifelse(grepl("*wild*|*fire*", temp$EVTYPE, ignore.case = TRUE), "Wildfire", gsub("XYZ", "XYZ", temp$EVTYPE))
## 47. Winter Storm
temp$EVTYPE <- ifelse(grepl("*winter storm*", temp$EVTYPE, ignore.case = TRUE), "Winter Storm", gsub("XYZ", "XYZ", temp$EVTYPE))
## 48. Winter Weather
#  Wintry mix, type name is revised/renamed to Winter Weather.
temp$EVTYPE <- ifelse(grepl("*winter weather*|*wintry*", temp$EVTYPE, ignore.case = TRUE), "Winter Weather", gsub("XYZ", "XYZ", temp$EVTYPE))
temp <- temp[-c(1967,4206),]
unique(temp$EVTYPE)
countEVTYPE = as.data.frame(count(unique(select(temp, BGN_DATE, unique(EVTYPE)) %>% group_by(BGN_DATE))))
# Here, we are displaying the numbers of occurrence for each event type.
countEVTYPE
# Below, we are creating our smaller new dataset (1993 to 2011).
dim(temp)
temp <- as.data.frame(select(temp, BGN_DATE, EVTYPE, FATALITIES, INJURIES) %>% filter(BGN_DATE >= 1993))
countEVTYPE = as.data.frame(count(unique(select(temp, BGN_DATE, unique(EVTYPE)) %>% group_by(BGN_DATE))))
dim(temp)
tempTypeSum <- as.data.frame(select(temp, FATALITIES, INJURIES, EVTYPE) %>% group_by(EVTYPE) %>% summarize(HARMS = sum(FATALITIES, INJURIES)))
# Adding the 8 rows for event types with 0 values.
tempTypeSum <- rbind(tempTypeSum, data.frame(EVTYPE = as.character(c("Astronomical Low Tide", "Dense Smoke", "Lake-Effect Snow", "Lakeshore Flood", "Marine Hail", "Seiche", "Tropical Depression", "Volcanic Ash")), HARMS = as.numeric(rep(c(0),8))))
# Printing out the total numbers for each event type.
arrange(tempTypeSum, desc(HARMS))
# Creating the plot to display the graphical model of our dataset.
theme_set(theme_gray(base_size = 10))
g <- ggplot(data = tempTypeSum, aes(x = EVTYPE, y = HARMS, fill = EVTYPE)) + geom_bar(stat = "identity") + coord_flip() + guides(fill==FALSE)
g
arrange(tempTypeSum, desc(HARMS))
theme_set(theme_gray(base_size = 10))
g <- ggplot(data = tempTypeSum, aes(x = EVTYPE, y = HARMS, fill = EVTYPE)) + geom_bar(stat = "identity") + coord_flip() + guides(fill==FALSE)
theme_set(theme_gray(base_size = 10))
g <- ggplot(data = tempTypeSum, aes(x = EVTYPE, y = HARMS, fill = EVTYPE)) + geom_bar(stat = "identity") + coord_flip() + guides(fill=FALSE)
g
# Creating a new dataset with 6 variables of (BGN_DATE, EVTYPE, PROPDMG, PRODMGEXP, CROPDMG, CROPDMGEXP).
economicDamage <- select(stormData, BGN_DATE, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
economicDamage$BGN_DATE <- as.Date(strptime(economicDamage$BGN_DATE, "%m/%d/%Y"), "%m/%d/%Y")
economicDamage$BGN_DATE <- year(economicDamage$BGN_DATE)
temp2 <- unique(as.data.frame(select(economicDamage, BGN_DATE, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% filter(PROPDMG > 0 | CROPDMG > 0) %>% group_by(BGN_DATE, EVTYPE)))
sapply(split(temp2, temp2$BGN_DATE), nrow)
multiValues2 <- strsplit(as.character(toupper(temp2$EVTYPE)), 'COLD/WIND(*SKIP)(*F)|FROST/FREEZE(*SKIP)(*F)|URBAN/SML(*SKIP)(*F)|SURGE/TIDE(*SKIP)(*F)|URBAN AND SMALL(*SKIP)(*F)|URBAN/SMALL(*SKIP)(*F)|COOL AND WET(*SKIP)(*F)|HYPOTHERMIA/EXPOSURE(*SKIP)(*F)|HYPERTHERMIA/EXPOSURE(*SKIP)(*F)|WEATHER/MIX(*SKIP)(*F)|FLOODING/EROSION(*SKIP)(*F)|FLOOD/ STREET(*SKIP)(*F)|/|WARM AND DRY(*SKIP)(*F)|LANDSLIDE(*SKIP)(*F)|WIND/AWNING(*SKIP)(*F)|LANDSLIDES(*SKIP)(*F)|WIND/ TREES(*SKIP)(*F)|WIND/ TREE(*SKIP)(*F)| AND | & |- |, ', perl=TRUE)
temp2 <- data.frame(BGN_DATE=rep(temp2$BGN_DATE, sapply(multiValues2, FUN=length)), EVTYPE=unlist(multiValues2),PROPDMG=rep(temp2$PROPDMG, sapply(multiValues2, FUN=length)), PROPDMGEXP=rep(temp2$PROPDMGEXP, sapply(multiValues2, FUN=length)), CROPDMG=rep(temp2$CROPDMG, sapply(multiValues2, FUN=length)), CROPDMGEXP=rep(temp2$CROPDMGEXP, sapply(multiValues2, FUN=length)))
dim(temp2)
## 1.  Astronomical Low Tide
temp2$EVTYPE <- ifelse(grepl("*astronomic*", temp2$EVTYPE, ignore.case = TRUE), "Astronomical Low Tide", gsub("astronomical", "Astronomical Low Tide", temp2$EVTYPE))
## 2.  Avalanche
temp2$EVTYPE <- ifelse(grepl("*aval*", temp2$EVTYPE, ignore.case = TRUE), "Avalanche", gsub("avalanche", "Avalanche", temp2$EVTYPE))
## 3.  Blizzard
temp2$EVTYPE <- ifelse(grepl("*bliz*", temp2$EVTYPE, ignore.case = TRUE), "Blizzard", gsub("blizzard", "Blizzard", temp2$EVTYPE))
## 4.  Coastal Flood
#  Costal storm/Erosion/CSTL flood, type names are revised/renamed to Coastal Flood.
temp2$EVTYPE <- ifelse(grepl("*coast*|*tidal*|^erosion|*cstl*", temp2$EVTYPE, ignore.case = TRUE), "Coastal Flood", gsub("coastal", "Coastal Flood", temp2$EVTYPE))
## 5.  Cold/Wind Chill
#  Low Temperature, type name is revised/renamed to Cold/Wind Chill.
temp2$EVTYPE <- ifelse(grepl("^cold*|*temperature", temp2$EVTYPE, ignore.case = TRUE), "Cold/Wind Chill", gsub("Cold/Wind Chill", "Cold/Wind Chil", temp2$EVTYPE))
## 6.  Debris Flow
#  Slide/Slides/Rock Slide, type names are revised/renamed to Debris Flow.
temp2$EVTYPE <- ifelse(grepl("*debris*|^slide*|*lands*|*rock*", temp2$EVTYPE, ignore.case = TRUE), "Debris Flow", gsub("Debris", "Debris Flow", temp2$EVTYPE))
## 7.  Dense Fog
#  Fog, type name is revised/renamed to Dense Fog.
temp2$EVTYPE <- ifelse(grepl("^fog$|^dense*", temp2$EVTYPE, ignore.case = TRUE), "Dense Fog", gsub("dense fog", "Dense Fog", temp2$EVTYPE))
## 8.  Dense Smoke
#  There are no property damge/crop damage records for Dense Smoke.
temp2$EVTYPE <- ifelse(grepl("*smoke*", temp2$EVTYPE, ignore.case = TRUE), "Dense Smoke", gsub("dense smoke", "Dense Smoke", temp2$EVTYPE))
## 9.  Drought
temp2$EVTYPE <- ifelse(grepl("^drought*", temp2$EVTYPE, ignore.case = TRUE), "Drought", gsub("drought", "Drought", temp2$EVTYPE))
## 10. Dust Devil
temp2$EVTYPE <- ifelse(grepl("*devil*", temp2$EVTYPE, ignore.case = TRUE), "Dust Devil", gsub("devil", "Dust Devil", temp2$EVTYPE))
## 11. Dust Storm
#  Blowing dust, type name is revised/renamed to Dust Strom.
temp2$EVTYPE <- ifelse(grepl("*dust storm*|*blowing*", temp2$EVTYPE, ignore.case = TRUE), "Dust Storm", gsub("dust storm", "Dust Storm", temp2$EVTYPE))
## 12. Excessive Heat
#  Extreme heat type name is revised/renamed to Excessive Heat.
temp2$EVTYPE <- ifelse(grepl("*excessive.[^r].*|*extreme.[^wc].*", temp2$EVTYPE, ignore.case = TRUE), "Excessive Heat", gsub("excessiveheat", "Excessive Heat", temp2$EVTYPE))
## 13. Extreme Cold/Wind Chill
temp2$EVTYPE <- ifelse(grepl("^([^c]).*cold*|*extreme wind*", temp2$EVTYPE, ignore.case = TRUE), "Extreme Cold/Wind Chill", gsub("extremecoldwindchill", "Extreme Cold/Wind Chill", temp2$EVTYPE))
## 14. Flash Flood
#  River flood/Mudslide/Mudslides/Breakup flooding/Rural flood/Dam break, type names are revised/renamed to Flash Flood.
temp2$EVTYPE <- ifelse(grepl("*flash*|*river*|*mud*|*breakup*|*rural*|*dam break*", temp2$EVTYPE, ignore.case = TRUE), "Flash Flood", gsub("flashflood", "Flash Flood", temp2$EVTYPE))
## 15. Flood
#  Severe Turbulence/Urban Flood/Major flood, type name is revised/renamed to Flood.
temp2$EVTYPE <- ifelse(grepl("^flood*|^minor*|*stream*|*turbulence*|^urban*|major|^ flood*", temp2$EVTYPE, ignore.case = TRUE), "Flood", gsub("flXXd", "Flood", temp2$EVTYPE))
## 16. Frost/Freeze
temp2$EVTYPE <- ifelse(grepl("*freez*|*frost*", temp2$EVTYPE, ignore.case = TRUE), "Frost Freeze", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 17. Funnel Cloud
temp2$EVTYPE <- ifelse(grepl("*funnel*", temp2$EVTYPE, ignore.case = TRUE), "Funnel Cloud", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 18. Freezing Fog
#  Glaze, type name is revised/renamed to Freezing Fog.
temp2$EVTYPE <- ifelse(grepl("*freezing fog*|*glaze*", temp2$EVTYPE, ignore.case = TRUE), "Freezing Fog", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 19. Hail
temp2$EVTYPE <- ifelse(grepl("*small*|*hail*", temp2$EVTYPE, ignore.case = TRUE), "Hail", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 20. Heat
#  Heat wave drought/Unseasonably warm/Warm weather, type names are revised/renamed to Heat.
temp2$EVTYPE <- ifelse(grepl("^heat$|^heat.*wave|*record*|*warm*", temp2$EVTYPE, ignore.case = TRUE), "Heat", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 21. Heavy Rain
#  Cool and wet/Wet conditions, type names are revised/renamed to Heavy Rain.
temp2$EVTYPE <- ifelse(grepl("*rain*|*shower*|^wet condition*|cool and wet*", temp2$EVTYPE, ignore.case = TRUE), "Heavy Rain", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 22. Heavy Snow
temp2$EVTYPE <- ifelse(grepl("*snow*", temp2$EVTYPE, ignore.case = TRUE), "Heavy Snow", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 23. High Surf
#  High seas/Seas/High waves/Heavy seas/High swells/Rough seas/Drowning/High water/Rapidly rising water/High Tide/Beach erosion, type names are revised/renamed to High Surf.
temp2$EVTYPE <- ifelse(grepl("*surf$|*seas$|*wave*|*swells*|*drowning*|*water$|^high tide*|*high surf advis*|^beach", temp2$EVTYPE, ignore.case = TRUE), "High Surf", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 24. High Wind
temp2$EVTYPE <- ifelse(grepl("^high wind*|^wind$|^winds$|^non-severe*|high  wind*", temp2$EVTYPE, ignore.case = TRUE), "High Wind", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 25. Hurricane (Typhoon)
temp2$EVTYPE <- ifelse(grepl("*hurricane*|*typhoon*", temp2$EVTYPE, ignore.case = TRUE), "Hurricane (Typhoon)", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 26. Ice Storm
#  Ice on road/Icy roads/Black ice/Hypothermia/Ice jam flood, type names are revised/renamed to Ice Storm.
temp2$EVTYPE <- ifelse(grepl("*ice storm*|*ice$|*icy roads$|*ice on *|^ice roads$|*hyp*|^ice jam|^ice floe", temp2$EVTYPE, ignore.case = TRUE), "Ice Storm", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 27. Lake-Effect Snow
#  There are no property damge/crop damage records for Lake-Effect Snow.
temp2$EVTYPE <- ifelse(grepl("*effect*", temp2$EVTYPE, ignore.case = TRUE), "Lake-Effect Snow", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 28. Lakeshore Flood
temp2$EVTYPE <- ifelse(grepl("*lake*", temp2$EVTYPE, ignore.case = TRUE), "Lakeshore Flood", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 29. Lightning
temp2$EVTYPE <- ifelse(grepl("*light*|ligntning", temp2$EVTYPE, ignore.case = TRUE), "Lightning", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 30. Marine Hail
#  There are no property damge/crop damage records for Marine Hail.
temp2$EVTYPE <- ifelse(grepl("*marine hail*", temp2$EVTYPE, ignore.case = TRUE), "Marine Hail", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 31. Marine High Wind
temp2$EVTYPE <- ifelse(grepl("*marine high*", temp2$EVTYPE, ignore.case = TRUE), "Marine High Wind", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 32. Marine Strong Wind
temp2$EVTYPE <- ifelse(grepl("*marine strong*", temp2$EVTYPE, ignore.case = TRUE), "Marine Strong Wind", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 33. Marine Thunderstorm Wind
#  Marine mishap/Marine accident, type names are revised/renamed to Marine Thunderstorm Wind.
temp2$EVTYPE <- ifelse(grepl("*marine thunderstorm*|*marine ts|*mishap*|*accident*", temp2$EVTYPE, ignore.case = TRUE), "Marine Thunderstorm Wind", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 34. Rip Current
temp2$EVTYPE <- ifelse(grepl("*current", temp2$EVTYPE, ignore.case = TRUE), "Rip Current", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 35. Seiche
#  Squalls, type name is revised/renamed to Seiche.
temp2$EVTYPE <- ifelse(grepl("*seiche*|*squall*", temp2$EVTYPE, ignore.case = TRUE), "Seiche", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 36. Sleet
temp2$EVTYPE <- ifelse(grepl("*sleet*", temp2$EVTYPE, ignore.case = TRUE), "Sleet", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 37. Storm Surge/Tide
temp2$EVTYPE <- ifelse(grepl("*surge*", temp2$EVTYPE, ignore.case = TRUE), "Storm Surge/Tide", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 38. Strong Wind
#  Gusty wind, type name is revised/renamed to Strong Wind.
temp2$EVTYPE <- ifelse(grepl("^strong*|*gusty*", temp2$EVTYPE, ignore.case = TRUE), "Strong Wind", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 39. Tunderstorm Wind
#  Dry microburst/Whirlwind/Wind damage/Downburst/Apache county, type names are revised/renamed to Thunderstorm Wind.
temp2$EVTYPE <- ifelse(grepl("^thunderstorm*|^TSTM*|^thunder*|*micro*|*mirc*|*wind storm*|*whirl*|^non tstm*|^thude*|^thunerstorm wind*|^tunder*|severe.[^w]|* tstm wind*|^non-tstm wind*|*damage*|*downburst*|*apache*", temp2$EVTYPE, ignore.case = TRUE), "Thunderstorm Wind", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 40. Tornado
#  Mixed precid, type name is revised/renamed to Tornado
temp2$EVTYPE <- ifelse(grepl("^tornado*|*precip*| tornado|^torndao", temp2$EVTYPE, ignore.case = TRUE), "Tornado", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 41. Tropical Depression
#  # There are no property damge/crop damage records for Tropical Depression.
temp2$EVTYPE <- ifelse(grepl("*depression*|*gradient wind*", temp2$EVTYPE, ignore.case = TRUE), "Tropical Depression", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 42. Tropical Storm
#  Storm force winds, type name is revised/renamed to Tropical Storm.
temp2$EVTYPE <- ifelse(grepl("*tropical*|*force*", temp2$EVTYPE, ignore.case = TRUE), "Tropical Storm", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 43. Tsunami
temp2$EVTYPE <- ifelse(grepl("*tsunami*", temp2$EVTYPE, ignore.case = TRUE), "Tsunami", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 44. Volcanic Ash
temp2$EVTYPE <- ifelse(grepl("*volcanic*", temp2$EVTYPE, ignore.case = TRUE), "Volcanic Ash", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 45. Waterspout
temp2$EVTYPE <- ifelse(grepl("*waterspout*", temp2$EVTYPE, ignore.case = TRUE), "Waterspout", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 46. Wildfire
temp2$EVTYPE <- ifelse(grepl("*wild*|*fire*", temp2$EVTYPE, ignore.case = TRUE), "Wildfire", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 47. Winter Storm
#  Heavy mix, type name is revised/renamed to Winter Storm.
temp2$EVTYPE <- ifelse(grepl("*winter storm*|*heavy mix*", temp2$EVTYPE, ignore.case = TRUE), "Winter Storm", gsub("XYZ", "XYZ", temp2$EVTYPE))
## 48. Winter Weather
#  Wintry mix/Severe weather, type names are revised/renamed to Winter Weather.
temp2$EVTYPE <- ifelse(grepl("*winter weather*|*wintry*|^severe weather", temp2$EVTYPE, ignore.case = TRUE), "Winter Weather", gsub("XYZ", "XYZ", temp2$EVTYPE))
temp2 <- temp2[-c(3251, 3594, 6198, 6341, 11829),]
unique(temp2$EVTYPE)
countEVTYPE2 = as.data.frame(count(unique(select(temp2, BGN_DATE, unique(EVTYPE)) %>% group_by(BGN_DATE))))
# Here, we are displaying the numbers of occurrence for each event type.
countEVTYPE2
# Below, we are creating our smaller new dataset (1993 to 2011).
dim(temp2)
temp2 <- as.data.frame(select(temp2, BGN_DATE, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% filter(BGN_DATE >= 1993))
countEVTYPE = as.data.frame(count(unique(select(temp2, BGN_DATE, unique(EVTYPE)) %>% group_by(BGN_DATE))))
dim(temp2)
# Disabling scientific notations
options("scipen"=10)
# Replacing 0-8, to 10 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("0|1|2|3|4|5|6|7|8", temp2$PROPDMGEXP, ignore.case = TRUE), 10, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
# Replacing +, with 1 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("+", temp2$PROPDMGEXP, fixed = TRUE), 1, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
# Replacing -, with 0 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("-", temp2$PROPDMGEXP, fixed = TRUE), 0, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
# Replacing ?, with 0 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("?", temp2$PROPDMGEXP, fixed = TRUE), 0, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
# Replacing H/h, with 100 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("h", temp2$PROPDMGEXP, ignore.case = TRUE), 100, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
# Replacing K/k, with 1000 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("k", temp2$PROPDMGEXP, ignore.case = TRUE), 1000, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
# Replacing M/m, with 1000000 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("m", temp2$PROPDMGEXP, ignore.case = TRUE), 1000000, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
# Replacing B/b, with 1000000000 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("b", temp2$PROPDMGEXP, ignore.case = TRUE), 1000000000, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
# Replacing ""/blank character, with 0 in PROPDMGEXP
temp2$PROPDMGEXP <- ifelse(grepl("^[[:space:]]*$", temp2$PROPDMGEXP, ignore.case = TRUE), 0, gsub("XYZ", "XYZ", temp2$PROPDMGEXP))
####
# Replacing 0-8, to 10 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("0|1|2|3|4|5|6|7|8", temp2$CROPDMGEXP, ignore.case = TRUE), 10, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
# Replacing +, with 1 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("+", temp2$CROPDMGEXP, fixed = TRUE), 1, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
# Replacing -, with 0 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("-", temp2$CROPDMGEXP, fixed = TRUE), 0, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
# Replacing ?, with 0 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("?", temp2$CROPDMGEXP, fixed = TRUE), 0, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
# Replacing H/h, with 100 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("h", temp2$CROPDMGEXP, ignore.case = TRUE), 100, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
# Replacing K/k, with 1000 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("k", temp2$CROPDMGEXP, ignore.case = TRUE), 1000, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
# Replacing M/m, with 1000000 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("m", temp2$CROPDMGEXP, ignore.case = TRUE), 1000000, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
# Replacing B/b, with 1000000000 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("b", temp2$CROPDMGEXP, ignore.case = TRUE), 1000000000, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
# Replacing ""/blank character, with 0 in CROPDMGEXP
temp2$CROPDMGEXP <- ifelse(grepl("^[[:space:]]*$", temp2$CROPDMGEXP, ignore.case = TRUE), 0, gsub("XYZ", "XYZ", temp2$CROPDMGEXP))
dim(temp2)
temp2$PROPDMGEXP <- as.numeric(temp2$PROPDMGEXP)
temp2$CROPDMGEXP <- as.numeric(temp2$CROPDMGEXP)
temp2 <- select(temp2, BGN_DATE, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% mutate(PROPCOMBINE = PROPDMG * PROPDMGEXP, CROPCOMBINE = CROPDMG * CROPDMGEXP)
# Below, we are just displaying the total of monetary damages for each group of property and crop damages
sum(temp2$PROPCOMBINE)
sum(temp2$CROPCOMBINE)
tempTypeSum2 <- as.data.frame(select(temp2, PROPCOMBINE, CROPCOMBINE, EVTYPE) %>% group_by(EVTYPE) %>% summarize(HARMS = sum(PROPCOMBINE, CROPCOMBINE)))
# Adding the 4 rows for event types with 0 values.
tempTypeSum2 <- rbind(tempTypeSum2, data.frame(EVTYPE = as.character(c("Dense Smoke", "Lake-Effect Snow", "Marine Hail", "Tropical Depression")), HARMS = as.numeric(rep(c(0),4))))
# Printing out the total numbers for each event type.
arrange(tempTypeSum2, desc(HARMS))
# Creating the plot to display the graphical model of our dataset.
theme_set(theme_gray(base_size = 10))
g2 <- ggplot(data = tempTypeSum2, aes(x = EVTYPE, y = HARMS, fill = EVTYPE)) + geom_bar(stat = "identity") + coord_flip() + guides(fill=FALSE)
g2
percentage1 <- tempTypeSum
percentage2 <- tempTypeSum2
percentage1
percentage4 <- arrange(percentage1, EVTYPE)
percentage4
percentage5 <- arrange(percentage2, EVTYPE)
for(i in 1:dim(percentage4)[1]) {percentage4[i,2] <- (percentage4$HARMS[i]* 100)/x}
percentage5
x <- 19915
y <- 162739625610
for(i in 1:dim(percentage4)[1]) {percentage4[i,2] <- (percentage4$HARMS[i]* 100)/x}
for(i in 1:dim(percentage5)[1]) {percentage5[i,2] <- (percentage5$HARMS[i]* 100)/y}
percentage7 <- percentage4
percentage7$HARMS <- round(percentage7$HARMS, 2)
plot(percentage7$EVTYPE, percentage7$HARMS)
percentage7
plot(x = percentage7$EVTYPE, y = percentage7$HARMS, xlim = range(48))
plot(x = percentage7$EVTYPE, y = percentage7$HARMS, xlim = range(percentage7$EVTYPE))
plot(x = percentage7$EVTYPE, y = percentage7$HARMS, xlim = range(48))
ggplot(percentage7, aes(EVTYPE)) +
geom_density()
ggplot(percentage7, aes(EVTYPE, HARMS)) + geom_density()
ggplot(percentage7, aes(EVTYPE, HARMS)) + geom_point()
ggplot(percentage7, aes(EVTYPE, HARMS)) + geom_line()
ggplot(percentage7, aes(EVTYPE, HARMS)) + geom_line(aes(color = EVTYPE))
ggplot(percentage7, aes(EVTYPE, HARMS)) + geom_point()
par(mfrow=c(2,1))
ggplot(percentage7, aes(EVTYPE, HARMS)) + geom_point()
percentage8 <- percentage5
percentage8$HARMS <- round(percentage8$HARMS, 2)
ggplot(percentage8, aes(EVTYPE, HARMS)) + geom_point()
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_path(data = percentage8) + geom_point(data = percentage7) + coord_equal()
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_path(data = percentage8) + geom_point(data = percentage7)
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_point(data = percentage8) + geom_point(data = percentage7)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8) + geom_point(data = percentage7)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_bar(data = percentage8, col = "brown") + geom_bar(data = percentage7, col = "green")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_bar(data = percentage8, col = "brown", stat = "identity") + geom_bar(data = percentage7, col = "green", stat = "identity")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_bar(data = percentage8, col = "brown", stat = "identity") + geom_bar(data = percentage7, col = "green", stat = "identity") + coord_flip()
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_bar(data = percentage8, col = "brown", stat = "identity") + geom_bar(data = percentage7, col = "green", stat = "identity") + coord_flip()
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_bar(data = percentage8, col = "brown", stat = "identity") + geom_bar(data = percentage7, col = "green", stat = "identity") + coord_flip()
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_bar(data = percentage8, colour="brown", stat = "identity") + geom_bar(data = percentage7, col = "green", stat = "identity") + coord_flip()
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_bar(data = percentage8, colours ="brown", stat = "identity") + geom_bar(data = percentage7, colours = "green", stat = "identity") + coord_flip()
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_bar(data = percentage8, colour ="brown", stat = "identity") + geom_bar(data = percentage7, colour = "green", stat = "identity") + coord_flip()
ggplot(mapping = aes(x = EVTYPE, y = HARMS)) + geom_bar(data = percentage8, fill ="brown", stat = "identity") + geom_bar(data = percentage7, fill = "green", stat = "identity") + coord_flip()
percentage7
percentage8
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green") + theme_stata()
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green") + theme_classic()
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green") + theme_light()
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types ")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green") + theme_minimal() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "brown") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + guides(colour = TRUE)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + guides(colors = TRUE)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + guides(col = TRUE)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types", y = "Event Type Percentage Based on The Highest Number in Their Group")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(Y = "Event Types", X = "Event Types Percentages Based on The Highest Number in Their Group")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(X = "Event Types Percentages Based on The Highest Number in Their Group", Y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = col)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = colour)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = color)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guide_legend(title = "bar")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guide_legend(title = waiver())
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides = (fill = guide_legend)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides = (fill = guide_legend(title=NULL))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(colour = guide_legend)
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = colour)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(colour = guide_legend)
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = colour)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = colours)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = col)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(colour = guide_legend)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(col = guide_legend)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(col = guide_legend(ncol = 2))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(colors = guide_legend(reverse = TRUE)
)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(col = guide_legend(reverse = TRUE))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Dataset", values = c("p1" = "blue", "p2" = "red", "p3" = "yellow"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Dataset", EVTYPE = c("p1" = "blue", "p2" = "red", "p3" = "yellow"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Dataset", HARMS = c("p1" = "blue", "p2" = "red", "p3" = "yellow"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Dataset", values = c("p1" = "blue", "p2" = "red"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Dataset", values = c("p1" = "blue", "p2" = "red"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = HARMS)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Dataset", values = c("p1" = "blue", "p2" = "green"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = HARMS)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(fill = guide_legend(label.position = "bottom"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = HARMS)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(fill = guide_legend(label.position = "bottom")) + scale_colour_manual("Dataset", values = c("p1" = "blue", "p2" = "green"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE, color = (percentage8, percentage7))) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, color = c(percentage8, percentage7))) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, color = c("green", "blue"))) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, color = c("green", "blue"))) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(color = guide_legend(label.position = "bottom"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = c("green", "blue"))) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + guides(fill = guide_legend(label.position = "bottom"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE, fill = c("green", "blue"))) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE, colour = c("green", "blue"))) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Dataset", values = c("p1" = "blue", "p2" = "red", "p3" = "yellow")
)
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, col = "blue") + geom_point(data = percentage7, col = "green") + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Dataset", values = c("p1" = "blue", "p2" = "red", "p3" = "yellow"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(aes(data = percentage8, col = "blue")) + geom_point(aes(data = percentage7, col = "green")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, aes(col = "blue")) + geom_point(data = percentage7, aes(col = "green")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, aes(col = "red")) + geom_point(data = percentage7, aes(col = "blue")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, aes(col = "red")) + geom_point(data = percentage7, aes(col = "blue")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types")
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, aes(col = "red")) + geom_point(data = percentage7, aes(col = "blue")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Legend", c("red" = "blue", "blue" = "green"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, aes(col = "red")) + geom_point(data = percentage7, aes(col = "blue")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Legend", values = c("red" = "blue", "blue" = "green"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, aes(col = "Population Health")) + geom_point(data = percentage7, aes(col = "Economical Consequences")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Population and Economical Datasets", values = c("Population Health" = "blue", "Economical Consequences" = "green"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, aes(col = "Population Health")) + geom_point(data = percentage7, aes(col = "Economical Consequences")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Population and Economical Datasets", values = c("Economical Consequences" = "blue", "Population Health" = "green"))
ggplot(mapping = aes(x = HARMS, y = EVTYPE)) + geom_point(data = percentage8, aes(col = "Economical Consequences")) + geom_point(data = percentage7, aes(col = "Population Health")) + theme_light() + ggtitle("Comparison of Economical and Population Health Impacts by Event Types in Percentage % ") + labs(x = "Event Types Percentages Based on The Highest Number in Their Group", y = "Event Types") + scale_colour_manual("Population and Economical Datasets", values = c("Economical Consequences" = "blue", "Population Health" = "green"))
wichmax(tempTypeSum$HARMS)
wich_max(tempTypeSum$HARMS)
which_max(tempTypeSum$HARMS)
whichmax(tempTypeSum$HARMS)
whichMax(tempTypeSum$HARMS)
max(tempTypeSum$HARMS)
max(tempTypeSum2$HARMS)
